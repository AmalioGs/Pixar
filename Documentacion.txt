Config DB

Utilizamos para acceder a la base de datos

Modificamos .env con los datos

Dentro de server creamos carpeta config / db.js

Creamos un import executeQuery en el app.js "solo para probar"

Creamos carpeta middleware con su multer

Crear carpeta user en modules
	-user.routes.js
		importar en app
	-user.controller
	-user.dal.js

Borramos la carpeta 'routes'

Limpiar front/back, quitar css de todo lo predeterminado

Crear carpeta context/ContextProvider.jsx en src
	-Si da fallo el chiken modificar eslint.config escribir:
		"react/prop/types": "disable",

Poner Container app.jsx

Crear en src carpeta routes, components, pages

Crear las rutas y añadirlas

Añadir al main de client ('client/src/main.jsx'):
	import 'bootstrap/dist/css/bootstrap.min.css';

  *REGISTER*

Hacemos el formulario de registro o bien con bootstrap o copiamos y pegamos el que tenemos.

Hacemos el initialValue con los parámetros iniciales.

Controlamos el form con handleChange creando un Hook para controlar el estado.

Nos vamos al back/modules/user:
  En routes:
    Ponemos el post

  En controller:
    - Creamos register y comprobamos en el try (async) con un console.log que nos llega bien los datos del form
    - Si esta bien, hacemos destructuring en el try de los datos del form y hacemos validaciones("Debes cumplimentar... Contraseñas no coinciden...") para ello lo recogemos a través de throw new Error y en el catch ponemos: 
      "res.status(400).json({msg: error.message});"

  En dal:
    - Creamos la clase UserDal (si no está creada), con register (async), hacemos la exportación por defecto "new UserDal()" y en el try hacemos una llamada al SQL con los datos que pedimos en el form. 
    - Importamos executeQuery (abrimos db.js para que sea automatico) y revisamos que la importación termine en .js
    - Hacemos el .log de los result y el error y si está OK, borramos y ponemos "throw error".

  (Si está todo bien, pasamos a hashear)
  Para ello creamos carpeta utils:
    'server/utils/hashUtils.js'
  En hashUtils:
    - Importamos bcrypt.
    - Exportamos hashPassword (async) y encryptamos tantas veces como queramos entre paréntesis, lo normal, 10.

  En controller:
    - Creamos la constante hash y nos traemos el hashPassword del hashUtils(se importa automáticamente si lo tenemos abierto).
    - En el result = cambiamos el user_password por hash.

Vamos a crear el axiosHelper.js y .env para ello vamos a client:
  axiosHelper = "client/src/Helpers/axiosHelper.js"
  .env = "client/.env" 
  En .env creamos un VITE con nuestra URL:
    Ej: "VITE_SERVER_URL=http://localhost:4000/"

  En axiosHelper:
    - Importamos axios y creamos la constante (en nuestro caso) "pixarUrl" e importamos el .env
    - Exportamos el fetchData (async) con url, method, data y headers

Volvemos a Register.jsx ('client/src/pages/auth/register/register.jsx):
  Eliminamos axios y lo sustituimos por el fetchData del axiosHelper que acabamos de crear.
  Borramos la importación axios que está creada.


* LOGIN *
Empezamos a crear el login.jsx
  Crear formulario
  Creamos la ruta post del login en el servidor, con su userController server/modules/user.routes
  Creamos fetchData dentro del onSubmit en el login
  Creamos en user.dal el findUserByEmail para el login del user.controller
  Vamos a hashUtils para crear una función que compare las Contraseñas
  En el user controller llamar a la función creada
  En la carpeta utils crear tokenUtils.js donde crearemos las funciones de los tokens
  Crear la token_key en .env
  Llamar generateToken en user.controller
  Guardar datos en el localStorage dentro del onSubmit del login
  Crear ruta get findUserById 
  Crear verifyToken en el middleware del server 
  Creamos una función para sacar el ID del token en tokenUtils
  Crear getUserById en user.dal








